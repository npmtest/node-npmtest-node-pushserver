{"/home/travis/build/npmtest/node-npmtest-node-pushserver/test.js":"/* istanbul instrument in package npmtest_node_pushserver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-pushserver/lib.npmtest_node_pushserver.js":"/* istanbul instrument in package npmtest_node_pushserver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_pushserver = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_pushserver = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-pushserver/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-pushserver && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_pushserver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_pushserver\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_pushserver.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_pushserver.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_pushserver.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_pushserver.__dirname + '/lib.npmtest_node_pushserver.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-pushserver/node_modules/node-pushserver/lib/PushController.js":"/**\n * Created with JetBrains WebStorm.\n * User: Vincent Lemeunier\n * Date: 06/06/13\n * Time: 15:41\n */\n\nvar _ = require('lodash'),\n    pushAssociations = require('./PushAssociations'),\n    apnPusher = require('./APNPusher'),\n    gcmPusher = require('./GCMPusher');\n\n\nvar send = function (pushAssociations, androidPayload, iosPayload) {\n    var androidTokens = _(pushAssociations).where({type: 'android'}).map('token').value();\n    var iosTokens = _(pushAssociations).where({type: 'ios'}).map('token').value();\n\n    if (androidPayload && androidTokens.length > 0) {\n        var gcmPayload = gcmPusher.buildPayload(androidPayload);\n        gcmPusher.push(androidTokens, gcmPayload);\n    }\n\n    if (iosPayload && iosTokens.length > 0) {\n        var apnPayload = apnPusher.buildPayload(iosPayload);\n        apnPusher.push(iosTokens, apnPayload);\n    }\n};\n\nvar sendUsers = function (users, payload) {\n    pushAssociations.getForUsers(users, function (err, pushAss) {\n        if (err) return;\n        send(pushAss, payload);\n    });\n};\n\nvar subscribe = function (deviceInfo) {\n    pushAssociations.add(deviceInfo.user, deviceInfo.type, deviceInfo.token);\n};\n\nvar unsubscribeDevice = function (deviceToken) {\n    pushAssociations.removeDevice(deviceToken);\n};\n\nvar unsubscribeUser = function (user) {\n    pushAssociations.removeForUser(user);\n};\n\nmodule.exports = {\n    send: send,\n    sendUsers: sendUsers,\n    subscribe: subscribe,\n    unsubscribeDevice: unsubscribeDevice,\n    unsubscribeUser: unsubscribeUser\n};","/home/travis/build/npmtest/node-npmtest-node-pushserver/node_modules/node-pushserver/lib/PushAssociations.js":"var mongoose = require('mongoose');\nvar config = require('./Config');\nvar _ = require('lodash');\n\n// Init\nvar PushAssociation;\n\nvar initialize = _.once(function () {\n    var db = mongoose.connect(config.get('mongodbUrl'));\n    mongoose.connection.on('error', errorHandler);\n\n    var pushAssociationSchema = new db.Schema({\n        user: {\n            type: 'String',\n            required: true\n        },\n        type: {\n            type: 'String',\n            required: true,\n            enum: ['ios', 'android'],\n            lowercase: true\n        },\n        token: {\n            type: 'String',\n            required: true\n        }\n    });\n\n    // I must ensure uniqueness accross the two properties because two users can have the same token (ex: in apn, 1 token === 1 device)\n    pushAssociationSchema.index({ user: 1, token: 1 }, { unique: true });\n\n    PushAssociation = db.model('PushAssociation', pushAssociationSchema);\n\n    return module.exports;\n});\n\nvar add = function (user, deviceType, token) {\n    var pushItem = new PushAssociation({user: user, type: deviceType, token: token});\n    pushItem.save();\n};\n\nvar updateTokens = function (fromToArray) {\n    fromToArray.forEach(function (tokenUpdate) {\n        PushAssociation.findOneAndUpdate({token: tokenUpdate.from}, {token: tokenUpdate.to}, function (err) {\n            if (err) console.error(err);\n        });\n    });\n};\n\nvar getAll = function (callback) {\n    var wrappedCallback = outputFilterWrapper(callback);\n\n    PushAssociation.find(wrappedCallback);\n};\n\nvar getForUser = function (user, callback) {\n    var wrappedCallback = outputFilterWrapper(callback);\n\n    PushAssociation.find({user: user}, wrappedCallback);\n};\n\nvar getForUsers = function (users, callback) {\n    var wrappedCallback = outputFilterWrapper(callback);\n\n    PushAssociation.where('user')\n        .in(users)\n        .exec(wrappedCallback);\n};\n\nvar removeForUser = function (user) {\n    PushAssociation.remove({user: user}, function (err) {\n        if (err) console.dir(err);\n    });\n};\n\nvar removeDevice = function (token) {\n    PushAssociation.remove({token: token}, function (err) {\n        if (err) console.log(err);\n    });\n};\n\nvar removeDevices = function (tokens) {\n    PushAssociation.remove({token: {$in: tokens}}, function (err) {\n        if (err) console.log(err);\n    });\n};\n\nvar outputFilterWrapper = function (callback) {\n    return function (err, pushItems) {\n        if (err) return callback(err, null);\n\n        var items = _.map(pushItems, function (pushItem) {\n            return _.pick(pushItem, ['user', 'type', 'token'])\n        });\n\n        return callback(null, items);\n    }\n};\n\nvar initWrapper = function (object) {\n    return _.transform(object, function (newObject, func, funcName) {\n        if(!_.isFunction(func)) return newObject[funcName] = func;\n\n        newObject[funcName] = function () {\n            if (_.isUndefined(PushAssociation)) {\n                initialize();\n            }\n\n            return func.apply(null, arguments);\n        };\n    });\n};\n\nvar errorHandler = function(error) {\n    console.error('ERROR: ' + error);\n};\n\nmodule.exports = initWrapper({\n    add: add,\n    updateTokens: updateTokens,\n    getAll: getAll,\n    getForUser: getForUser,\n    getForUsers: getForUsers,\n    removeForUser: removeForUser,\n    removeDevice: removeDevice,\n    removeDevices: removeDevices\n});","/home/travis/build/npmtest/node-npmtest-node-pushserver/node_modules/node-pushserver/lib/Config.js":"/**\n * Created with JetBrains WebStorm.\n * User: smile\n * Date: 17/06/13\n * Time: 12:03\n * To change this template use File | Settings | File Templates.\n */\nvar _ = require('lodash');\n\nvar config;\n\nvar initialize = _.once(function (configFilePath, overrides) {\n    config = _.merge({}, require(configFilePath), overrides);\n\n    // Replace any \"process.env.*\" by its corresponding value\n    _.forOwn(config, function(value, key){\n        var env = /^process\\.env\\.(.+)$/.exec(value);\n        if(env) {\n          config[key] = process.env[env[1]];\n        }\n    });\n\n    return config;\n});\n\nvar get = function (key) {\n    if (!config) initialize('../config.json');\n    return config[key];\n};\n\nmodule.exports = {\n    initialize: initialize,\n    get: get\n}","/home/travis/build/npmtest/node-npmtest-node-pushserver/node_modules/node-pushserver/lib/APNPusher.js":"/**\n * Created with JetBrains WebStorm.\n * User: smile\n * Date: 13/06/13\n * Time: 16:42\n * To change this template use File | Settings | File Templates.\n */\n\n\nvar config = require('./Config');\nvar _ = require('lodash');\nvar apn = require('apn');\nvar pushAssociations = require('./PushAssociations')\n\nvar push = function (tokens, payload) {\n    apnSender().pushNotification(payload, tokens);\n};\n\nvar buildPayload = function (options) {\n    var notif = new apn.Notification(options.payload);\n\n    notif.expiry = options.expiry || 0;\n    notif.alert = options.alert;\n    notif.badge = options.badge;\n    notif.sound = options.sound;\n\n    return notif;\n};\n\nvar apnSender = _.once(function () {\n    var apnConnection = new apn.Connection(config.get('apn').connection);\n\n    apnConnection.on('transmissionError', onTransmissionError);\n    initAppFeedback();\n\n    return apnConnection;\n});\n\nvar onTransmissionError = function (errorCode, notification, recipient) {\n    console.error('Error while pushing to APN: ' + errorCode);\n    // Invalid token => remove device\n    if (errorCode === 8) {\n        var token = recipient.token.toString('hex').toUpperCase();\n\n        console.log('Invalid token: removing device ' + token);\n        pushAssociations.removeDevice(token);\n    }\n};\n\nvar onFeedback = function (deviceInfos) {\n    console.log('Feedback service, number of devices to remove: ' + deviceInfos.length);\n\n    pushAssociations.removeDevices(deviceInfos.map(function (deviceInfo) {\n        return deviceInfo.token.toString('hex');\n    }));\n};\n\nvar initAppFeedback = function () {\n    var apnFeedback = new apn.Feedback(config.get('apn').feedback)\n\n    apnFeedback.on('feedback', onFeedback);\n};\n\nmodule.exports = {\n    push: push,\n    buildPayload: buildPayload\n}","/home/travis/build/npmtest/node-npmtest-node-pushserver/node_modules/node-pushserver/lib/GCMPusher.js":"/**\n * Created with JetBrains WebStorm.\n * User: smile\n * Date: 13/06/13\n * Time: 16:42\n * To change this template use File | Settings | File Templates.\n */\n\nvar config = require('./Config')\nvar _ = require('lodash');\nvar gcm = require('node-gcm');\nvar pushAssociations = require('./PushAssociations');\n\n\nvar push = function (tokens, message) {\n    gcmSender().send(message, tokens, 4, function (err, res) {\n        if(err) console.log(err);\n\n        if (res) {\n            var mappedResults = _.map(_.zip(tokens, res.results), function (arr) {\n                return _.merge({token: arr[0]}, arr[1]);\n            });\n\n            handleResults(mappedResults);\n        }\n    })\n};\n\nvar handleResults = function (results) {\n    var idsToUpdate = [],\n        idsToDelete = [];\n\n    results.forEach(function (result) {\n        if (!!result.registration_id) {\n            idsToUpdate.push({from: result.token, to: result.registration_id});\n\n        } else if (result.error === 'InvalidRegistration' || result.error === 'NotRegistered') {\n            idsToDelete.push(result.token);\n        }\n    });\n\n    if (idsToUpdate.length > 0) pushAssociations.updateTokens(idsToUpdate);\n    if (idsToDelete.length > 0) pushAssociations.removeDevices(idsToDelete);\n};\n\nvar buildPayload = function (options) {\n    return new gcm.Message(options);\n};\n\nvar gcmSender = _.once(function() {\n    return new gcm.Sender(config.get('gcm').apiKey);\n});\n\nmodule.exports = {\n    push: push,\n    buildPayload:buildPayload\n}\n","/home/travis/build/npmtest/node-npmtest-node-pushserver/node_modules/node-pushserver/lib/Web.js":"var config = require('./Config');\nvar express = require('express');\nvar _ = require('lodash');\nvar pushAssociations = require('./PushAssociations');\nvar push = require('./PushController');\n\nvar app = express();\n\n// Middleware\napp.use(express.compress());\napp.use(express.bodyParser());\n\napp.use(express.static(__dirname + '/../public'));\n\napp.use(function(err, req, res, next) {\n    res.status(500);\n    res.render('error', { error: err });\n});\n\napp.post('/*', function (req, res, next) {\n    if (req.is('application/json')) {\n        next();\n    } else {\n        res.status(406).send();\n    }\n});\n\n// Main API\napp.post('/subscribe', function (req, res) {\n    var deviceInfo = req.body;\n    push.subscribe(deviceInfo);\n\n    res.send();\n});\n\napp.post('/unsubscribe', function (req, res) {\n    var data = req.body;\n\n    if (data.user) {\n        push.unsubscribeUser(data.user);\n    } else if (data.token) {\n        push.unsubscribeDevice(data.token);\n    } else {\n        return res.status(503).send();\n    }\n\n    res.send();\n});\n\napp.post('/send', function (req, res) {\n    var notifs = [req.body];\n\n    var notificationsValid = sendNotifications(notifs);\n\n    res.status(notificationsValid ? 200 : 400).send();\n});\n\napp.post('/sendBatch', function (req, res) {\n    var notifs = req.body.notifications;\n\n    var notificationsValid = sendNotifications(notifs);\n\n    res.status(notificationsValid ? 200 : 400).send();\n});\n\n// Utils API\napp.get('/users/:user/associations', function (req, res) {\n    pushAssociations.getForUser(req.params.user, function (err, items) {\n        if (!err) {\n            res.send({\"associations\": items});\n        } else {\n            res.status(503).send();\n        }\n    });\n});\n\napp.get('/users', function (req, res) {\n    pushAssociations.getAll(function (err, pushAss) {\n        if (!err) {\n            var users = _(pushAss).map('user').unique().value();\n            res.send({\n                \"users\": users\n            });\n        } else {\n            res.status(503).send()\n        }\n    });\n});\n\napp.delete('/users/:user', function (req, res) {\n    pushController.unsubscribeUser(req.params.user);\n    res.send('ok');\n});\n\n\n// Helpers\nfunction sendNotifications(notifs) {\n    var areNotificationsValid = _(notifs).map(validateNotification).min().value();\n\n    if (!areNotificationsValid) return false;\n\n    notifs.forEach(function (notif) {\n        var users = notif.users,\n            androidPayload = notif.android,\n            iosPayload = notif.ios,\n            target;\n\n        if (androidPayload && iosPayload) {\n            target = 'all'\n        } else if (iosPayload) {\n            target = 'ios'\n        } else if (androidPayload) {\n            target = 'android';\n        }\n\n        var fetchUsers = users ? pushAssociations.getForUsers : pushAssociations.getAll,\n            callback = function (err, pushAssociations) {\n                if (err) return;\n\n                if (target !== 'all') {\n                    // TODO: do it in mongo instead of here ...\n                    pushAssociations = _.where(pushAssociations, {'type': target});\n                }\n\n                push.send(pushAssociations, androidPayload, iosPayload);\n            },\n            args = users ? [users, callback] : [callback];\n\n        // TODO: optim. -> mutualise user fetching ?\n        fetchUsers.apply(null, args);\n    });\n\n    return true;\n}\n\nfunction validateNotification(notif) {\n    var valid = true;\n\n    valid = valid && (!!notif.ios || !!notif.android);\n    // TODO: validate content\n\n    return valid;\n}\n\nexports.start = function () {\n    app.listen(config.get('webPort'));\n    console.log('Listening on port ' + config.get('webPort') + \"...\");\n};\n"}